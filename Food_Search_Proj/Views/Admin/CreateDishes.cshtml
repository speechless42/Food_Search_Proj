﻿@model Food_Search_Proj.Models.Dishes

@{
    ViewBag.Title = "CreateDishes";
}

<h2>CreateDishes</h2>

<div id="app">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Dishes</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_ID, "Dishes_ID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dishes_ID, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.DishID } })
                @Html.ValidationMessageFor(model => model.Dishes_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dishes_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Dishes_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Contain_Food_Value, "食材名稱", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("Dishes_Contain_Food_Value", null, new { @v_model = "selected" });
                @Html.ValidationMessageFor(model => model.Dishes_Contain_Food_Value, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Methods, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Dishes_Methods, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Dishes_Methods, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Photo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.FileFor(model => model.Dishes_Photo, new { htmlAttributes = new { @class = "form-control",  type = "File" } })*@
                <input type="file" name="file" class="form-control" v-on:change="PickFile" />
                @Html.ValidationMessageFor(model => model.Dishes_Photo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Remark, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dishes_Remark, new { htmlAttributes = new { @class = "form-control col-md-2" } })
                @Html.ValidationMessageFor(model => model.Dishes_Remark, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dishes_Recommend_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dishes_Recommend_Date, new { htmlAttributes = new { @class = "form-control", @type = "date", @Value = System.DateTime.Today.ToString("yyyy-MM-dd") } })
                @Html.ValidationMessageFor(model => model.Dishes_Recommend_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Food_Review_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Food_Review_Date, new { htmlAttributes = new { @class = "form-control", @type = "date", @Value = System.DateTime.Today.ToString("yyyy-MM-dd") } })
                @Html.ValidationMessageFor(model => model.Food_Review_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Food_Review_Result, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Food_Review_Result, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.ReviewResult } })
                @Html.ValidationMessageFor(model => model.Food_Review_Result, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Referral_User_ID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Referral_User_ID, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.user } })
                @Html.ValidationMessageFor(model => model.Referral_User_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Review_Manager_ID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Review_Manager_ID, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.user } })
                @Html.ValidationMessageFor(model => model.Review_Manager_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    }
    <img v-if="image" :src="image" width="200" />
    {{selected}}
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    const { createApp } = Vue

    createApp({
        data() {
            return {
                image: "",
                selected:""
            }
        },
        methods: {
            PickFile: function (e) {
                const file = e.target.files.item(0);
                const reader = new FileReader();
                reader.addEventListener('load', this.imageLoaded);
                reader.readAsDataURL(file);
            },
            imageLoaded: function (e) {
                this.image = e.target.result;
            }

        }
    }).mount('#app')
</script>